<UserControl x:Class="HocrEditor.Controls.DocumentTreeView"
             d:DataContext="{d:DesignInstance viewModels:HocrPageViewModel}"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:b="http://schemas.microsoft.com/xaml/behaviors"
             xmlns:behaviors="clr-namespace:HocrEditor.Behaviors"
             xmlns:controls="clr-namespace:HocrEditor.Controls"
             xmlns:converters="clr-namespace:HocrEditor.Converters"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:dd="urn:gong-wpf-dragdrop"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:viewModels="clr-namespace:HocrEditor.ViewModels"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             mc:Ignorable="d"
             d:DesignHeight="300"
             d:DesignWidth="300">
    <controls:TitledPanel Header="Document Elements"
                          FlowDirection="LeftToRight">
        <TreeView x:Name="TreeView"
                  BorderThickness="0"
                  Background="Transparent"
                  ItemsSource="{Binding ItemsSource, RelativeSource={RelativeSource AncestorType=UserControl}}"
                  FlowDirection="{Binding RelativeSource={RelativeSource AncestorType=UserControl}, Path=FlowDirection}"
                  VerticalAlignment="Stretch"
                  dd:DragDrop.DragHandler="{Binding DragHandler, RelativeSource={RelativeSource AncestorType=UserControl}}"
                  dd:DragDrop.DropHandler="{Binding DropHandler, RelativeSource={RelativeSource AncestorType=UserControl}}"
                  dd:DragDrop.IsDragSource="True"
                  dd:DragDrop.IsDropTarget="True">
            <b:Interaction.Behaviors>
                <behaviors:TreeViewMultipleSelectionBehavior
                    SelectedItems="{Binding SelectedItems, RelativeSource={RelativeSource AncestorType=UserControl}}" />
                <behaviors:BringTreeViewItemIntoViewBehavior
                    SelectedItems="{Binding SelectedItems, RelativeSource={RelativeSource AncestorType=UserControl}}" />
            </b:Interaction.Behaviors>

            <TreeView.Resources>
                <converters:ValueConverterGroup x:Key="NullableToVisibilityConverter">
                    <converters:NullableToBooleanConverter />
                    <BooleanToVisibilityConverter />
                </converters:ValueConverterGroup>
                <converters:NullableBitmapSourceConverter x:Key="NullableBitmapSourceConverter" />
            </TreeView.Resources>

            <TreeView.ItemContainerStyle>
                <Style BasedOn="{StaticResource TreeViewItemStyle}"
                       TargetType="{x:Type TreeViewItem}"
                       d:DataContext="{d:DesignInstance viewModels:HocrNodeViewModel}">
                    <Setter Property="behaviors:TreeViewMultipleSelectionBehavior.IsItemSelected"
                            Value="{Binding IsSelected, Mode=TwoWay}" />

                    <EventSetter Event="PreviewKeyDown"
                                 HandledEventsToo="True"
                                 Handler="TreeViewItem_OnKeyDown" />

                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type TreeViewItem}">
                                <Grid>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition MinWidth="19"
                                                          Width="Auto" />
                                        <ColumnDefinition Width="Auto" />
                                        <ColumnDefinition Width="*" />
                                    </Grid.ColumnDefinitions>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto" />
                                        <RowDefinition />
                                    </Grid.RowDefinitions>

                                    <Border BorderBrush="{x:Static SystemColors.ControlDarkBrush}"
                                            Grid.Column="0"
                                            Grid.ColumnSpan="3"
                                            Grid.Row="0"
                                            SnapsToDevicePixels="True"
                                            Visibility="Collapsed"
                                            x:Name="dropTargetCue" />

                                    <ToggleButton ClickMode="Press"
                                                  Grid.Column="0"
                                                  Grid.Row="0"
                                                  IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
                                                  Style="{StaticResource ExpandCollapseToggleStyle}"
                                                  x:Name="Expander" />
                                    <Border Background="{TemplateBinding Background}"
                                            BorderBrush="{TemplateBinding BorderBrush}"
                                            BorderThickness="{TemplateBinding BorderThickness}"
                                            CornerRadius="{TemplateBinding Border.CornerRadius}"
                                            SnapsToDevicePixels="True"
                                            Grid.Column="1"
                                            Grid.Row="0"
                                            x:Name="Bd">
                                        <Grid>
                                            <Rectangle Margin="1"
                                                       Stroke="Black"
                                                       StrokeDashArray="1 2"
                                                       StrokeThickness="1"
                                                       Visibility="Hidden"
                                                       x:Name="FocusRectangle" />
                                            <ContentPresenter ContentSource="Header"
                                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                              Margin="{TemplateBinding Padding}"
                                                              x:Name="PART_Header" />
                                        </Grid>
                                    </Border>
                                    <ItemsPresenter Grid.Column="1"
                                                    Grid.ColumnSpan="2"
                                                    Grid.Row="1"
                                                    Visibility="Collapsed"
                                                    x:Name="ItemsHost" />
                                </Grid>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="HasItems"
                                             Value="false">
                                        <Setter Property="Visibility"
                                                TargetName="Expander"
                                                Value="Hidden" />
                                    </Trigger>
                                    <MultiTrigger>
                                        <MultiTrigger.Conditions>
                                            <Condition Property="HasHeader"
                                                       Value="false" />
                                            <Condition Property="Width"
                                                       Value="Auto" />
                                        </MultiTrigger.Conditions>
                                        <Setter Property="MinWidth"
                                                TargetName="PART_Header"
                                                Value="75" />
                                    </MultiTrigger>
                                    <MultiTrigger>
                                        <MultiTrigger.Conditions>
                                            <Condition Property="HasHeader"
                                                       Value="false" />
                                            <Condition Property="Height"
                                                       Value="Auto" />
                                        </MultiTrigger.Conditions>
                                        <Setter Property="MinHeight"
                                                TargetName="PART_Header"
                                                Value="19" />
                                    </MultiTrigger>

                                    <Trigger Property="IsSelected"
                                             Value="True">
                                        <Setter Property="Border.Background"
                                                Value="{StaticResource TreeView.Highlight.Background}" />
                                        <Setter Property="Border.BorderBrush"
                                                Value="{StaticResource TreeView.Highlight.Border}" />
                                    </Trigger>

                                    <!--  Show the border when the item is focused  -->
                                    <Trigger Property="IsFocused"
                                             Value="True">
                                        <Setter Property="Border.Background"
                                                Value="Transparent" />
                                        <Setter Property="Border.BorderBrush"
                                                Value="Transparent" />
                                        <Setter Property="Rectangle.Visibility"
                                                TargetName="FocusRectangle"
                                                Value="Visible" />
                                    </Trigger>

                                    <MultiTrigger>
                                        <MultiTrigger.Conditions>
                                            <Condition
                                                Property="behaviors:TreeViewMultipleSelectionBehavior.IsItemSelected"
                                                Value="True" />
                                        </MultiTrigger.Conditions>
                                        <Setter Property="Border.Background"
                                                Value="{StaticResource TreeView.Highlight.Background}" />
                                        <Setter Property="Border.BorderBrush"
                                                Value="{StaticResource TreeView.Highlight.Border}" />
                                    </MultiTrigger>

                                    <!--  Slightly darker background when the item is selected and focused  -->
                                    <MultiTrigger>
                                        <MultiTrigger.Conditions>
                                            <Condition Property="IsFocused"
                                                       Value="True" />
                                            <Condition
                                                Property="behaviors:TreeViewMultipleSelectionBehavior.IsItemSelected"
                                                Value="True" />
                                        </MultiTrigger.Conditions>
                                        <Setter Property="Border.Background"
                                                Value="{StaticResource TreeView.Highlight.Background}" />
                                        <Setter Property="Border.BorderBrush"
                                                Value="{StaticResource TreeView.Highlight.Border}" />
                                    </MultiTrigger>

                                    <!--  Make all selected items grey when the entire Window is inactive  -->
                                    <MultiDataTrigger>
                                        <MultiDataTrigger.Conditions>
                                            <Condition
                                                Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type Window}}, Path=IsActive, FallbackValue=False}"
                                                Value="False" />
                                            <Condition
                                                Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsSelected}"
                                                Value="True" />
                                        </MultiDataTrigger.Conditions>
                                        <Setter Property="Border.Background"
                                                Value="{StaticResource TreeView.Highlight.Disabled.Background}" />
                                        <!--  Windows 8: #f7f7f7  -->
                                        <Setter Property="Border.BorderBrush"
                                                Value="{StaticResource TreeView.Highlight.Disabled.Border}" />
                                        <!--  Windows 8: #dedede  -->
                                    </MultiDataTrigger>

                                    <!--  Make all selected items grey when none of this TreeView's items is focused (i.e. the TreeView is not focused)  -->
                                    <MultiDataTrigger>
                                        <MultiDataTrigger.Conditions>
                                            <Condition
                                                Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type TreeView}}, Path=IsKeyboardFocusWithin, FallbackValue=False}"
                                                Value="False" />
                                            <Condition
                                                Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type TreeView}}, Path=ContextMenu.IsOpen, FallbackValue=False}"
                                                Value="False" />
                                            <Condition
                                                Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsSelected}"
                                                Value="True" />
                                        </MultiDataTrigger.Conditions>
                                        <Setter Property="Border.Background"
                                                Value="{StaticResource TreeView.Highlight.Disabled.Background}" />
                                        <!--  Windows 8: #f7f7f7  -->
                                        <Setter Property="Border.BorderBrush"
                                                Value="{StaticResource TreeView.Highlight.Disabled.Border}" />
                                        <!--  Windows 8: #dedede  -->
                                    </MultiDataTrigger>


                                    <!--  Collapse the child items host if the node is not expanded  -->
                                    <Trigger Property="IsExpanded"
                                             Value="False">
                                        <Setter Property="UIElement.Visibility"
                                                TargetName="ItemsHost"
                                                Value="Collapsed" />
                                    </Trigger>

                                    <Trigger Property="IsExpanded"
                                             Value="True">
                                        <Setter Property="UIElement.Visibility"
                                                TargetName="ItemsHost"
                                                Value="Visible" />
                                    </Trigger>

                                    <!--  Hide the expander button if there are no child nodes  -->
                                    <Trigger Property="ItemsControl.HasItems"
                                             Value="False">
                                        <Setter Property="UIElement.Visibility"
                                                TargetName="Expander"
                                                Value="Hidden" />
                                    </Trigger>

                                    <!--  Use grey text colour when the item is not enabled  -->
                                    <Trigger Property="UIElement.IsEnabled"
                                             Value="False">
                                        <Setter Property="TextElement.Foreground"
                                                Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                                    </Trigger>

                                    <!--  Use a different template and colours in edit mode  -->
                                    <DataTrigger Binding="{Binding IsEditing}"
                                                 Value="True">
                                        <Setter Property="Border.Background"
                                                Value="{StaticResource TreeView.Highlight.Background}" />
                                        <Setter Property="Border.BorderBrush"
                                                Value="{StaticResource TreeView.Highlight.Border}" />
                                        <Setter Property="controls:EditableTextBlock.BorderThickness"
                                                Value="0" />
                                    </DataTrigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </TreeView.ItemContainerStyle>
            <TreeView.ItemTemplate>
                <HierarchicalDataTemplate DataType="{x:Type viewModels:HocrNodeViewModel}"
                                          ItemsSource="{Binding Children}">
                    <StackPanel Orientation="Horizontal">
                        <Image Margin="0,0,5,0"
                               Opacity="0.5"
                               Source="{Binding IconPath, Converter={StaticResource NullableBitmapSourceConverter}}"
                               ToolTip="{Binding IconTooltip}"
                               Visibility="{Binding IconPath, Converter={StaticResource NullableToVisibilityConverter}}" />
                        <controls:EditableTextBlock IsEnabled="{Binding IsEditable}"
                                                    LostFocus="EditableTextBlock_OnLostFocus"
                                                    Text="{Binding DisplayText, UpdateSourceTrigger=Explicit}"
                                                    TextChanged="EditableTextBlock_OnTextChanged"
                                                    x:Name="EditableTextBlock" />
                    </StackPanel>
                </HierarchicalDataTemplate>
            </TreeView.ItemTemplate>
        </TreeView>
    </controls:TitledPanel>
</UserControl>
